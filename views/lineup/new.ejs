<% layout ('layouts/boilerplate')%>
<h1>New Lineup</h1>  
<style>
  .searchBar{
    background-color: #fff;
    border-radius: 10px;
    border: 1px solid rgb(145, 137, 137);
    box-shadow: 0 2px 5px 1px rgba(3, 3, 3, 0.16);
}
.inputSearchBar{
    border: none;
    outline:0;
    background-color: transparent;
}
.searchDiv{

    border: 1px solid rgb(51, 43, 43);
}

.searchItem {

    cursor: pointer;
    border: none
}

.searchItem:hover {
    border:none;
    background-color: aliceblue;
}
</style>
<div class="container-fluid">
    
      <div class="row  my-2">
        <div class="col-sm-10 col-md-6">
          <div class="searchBar">
            <div class="d-flex flex-row align-items-center">
              <input id="searchSong" class="inputSearchBar px-3 py-2 flex-grow-1" type="text" placeholder="Type song title" autocomplete="off"/>
              <i class="fa fa-search p-2" aria-hidden="true"></i>
            </div>
            <ul id="searchResults" class="list-group list-group-flush">
            </ul>
          </div>         
        </div>
        <div class="col-sm-2 col-md-6">
          <div class="mb-3">
            <label for="serviceDate" class="form-label">Service Date</label>
            <input type="date" id="serviceDate" class="form-control">
          </div>
        
        </div>
      </div>
        <div class="row lineupSection mt-2">
          <div class="col-sm-10 col-md-12">
            <ol class="list-group list-group-numbered listSongs">

            </ol>
          </div>
        </div>
     
    <button id="saveLineupBtn" class="btn btn-primary d-flex mx-auto mt-3">Save Lineup</button>
</div>
<br>

<!-- Modal -->
<div class="modal fade" id="sectionModal" tabindex="-1" aria-labelledby="sectionModal" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title chordModalTitle" id="sectionModal" >Add Section</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row d-flex flex-row-reverse bd-highlight ">
         
        </div>

        <div>

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" id="lineUpSaveBtn" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal -->
<div class="modal fade" id="sectionModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title sectionModalTitle" id="sectionModal" >Add Chord for Lyric</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">

        <form id="sectionModalForm">
          <div class="sectionModalSection">
           
          </div>
        <div class="input-group mb-3">
          <input type="hidden" class="form-control lyricSection" placeholder="Chord" name=lyricSection">
          <input type="hidden" class="form-control lyricIndex" placeholder="Chord" name=lyricIndex">
          <input type="hidden" class="form-control lyricLine" placeholder="Chord" name=lyricLine">
        </div>
      </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" id="sectionModalSaveBtn" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>
<script src="/scales.js"></script>
<script>
    $(document).ready(function(){
      var timeoutId ;
      let songsCollection = [];

        function selectChordKey () {
        let index = 0;
        let html ='';
        let selectChordKey = $('#selectBaseChord');

        for (scale in scales){
            html +=`<option value=${scale} ${originalKey == scale ? "selected" : ''}> ${scale.toUpperCase()} </option>`
        }
        selectChordKey.html(html)
      }
      async function searchChords () {
        let lineUpTemp = {};
        clearTimeout(timeoutId);
        const song = $('#searchSong').val().toString();
        let ulSearch =  $('#searchResults');
        let html = '';
        try{
          if (!song){
            ulSearch.html('');
            return;
          }
          timeoutId = setTimeout(async () => {
        const res = await axios.get(`/song/viewChords/?songTitle=${encodeURIComponent(song)}`);
        if (res.data.length > 0) {
          res.data.forEach ((song)=>{
          
          html += `
          <li class="list-group-item searchItem" data-baseKey ="${song.baseKey}" data-dbSongId="${song._id}"><span class="fw-bold">${song.title} </span> by <span class="fw-normal">${song.artist}</span>
         
            </li>
          `;
        });
        }
        else {
          html += `<li class="list-group-item searchItem"><span class="fw-bold">No results... </span> </li>`;
        }

        ulSearch.html(html);
        // Handle response...
    }, 500); // Set a delay of 500 milliseconds
        }catch (error){
            console.log(error);
        }

      }

      async function saveLineUp () {
        const serviceData = new Date($('#serviceDate').val()).toISOString();
        let res = await axios.post(`/lineup`, {
          songs: songsCollection,
          lineupDate: serviceData
        }).then(function(response){
          console.log(response);
        }).catch(function (error){
          console.log(error);
        })
      }


      $(document).on('click', '.searchItem',  function (){
        let html = '';
        let songId = $(this).attr('data-dbSongId');
        let baseKey = $(this).attr('data-baseKey');
        let listSong = $('.listSongs');
        let song = $(this).text();
        listSong.append(`  
        <li class="list-group-item d-flex justify-content-between align-items-start lineupList" data-songId="${songId}" data-baseKey="${baseKey}">
    <div class="ms-2 me-auto">
        <div class="fw-bold">${song}</div>
        <div class="d-flex optionS justify-content-left">
            <label class="form-label m-1">Section</label>
            <select class="form-select songSection"  aria-label="Default select example" style="width: auto;">
                <option value="opening">Opening</option>
                <option value="praise">Praise</option>
                <option value="worship">Worship</option>
                <option value="closing">Closing</option>
            </select>
            <label class="form-label m-1">Key</label>
            <select class="form-select form-select-sm keyUsed">
                <option class="p-1" value="${baseKey.toLowerCase()}" selected>${baseKey}</option>
            </select>
        </div>
    </div>
    <span class="badge bg-primary rounded-pill"> <i class="fa fa-times" aria-hidden="true"></i></span>
</li>
`)
      });

    $('#lineUpSaveBtn').click(  function(){
      let html = '';
      let lineSection = $('.lineupSection');
      let section = $("#songSection").val();

      html+=`
      <div class="section" data-section="${section}">
        <h3>${section.toUpperCase()}</h3>

        </div>
      `;
      lineSection.html(html);

    });
    $('#searchSong').on('paste', searchChords);
    $('#searchSong').on('keyup', searchChords);
    
    $('#saveLineupBtn').on('click', async function () {
    let ol = $('.listSongs');
    let songs = ol.find('.lineupList');
    songs.each((index, el) => {
        const _id = $(el).data('songid'); // Use $(el) directly to access data attribute
        const section = $(el).find('.songSection').val();
        const keyUsed = $(el).find('.keyUsed').val();
        // if (!songsCollection.hasOwnProperty(section)){
        //   songsCollection [section] = [];
        // }
        const songObj = {
          song: _id,
          songType: section,
          keyUsed: keyUsed,
        }
        songsCollection.push(songObj);
    });
    let res = await saveLineUp();
});


    });


    

</script>
</body>

</html>
