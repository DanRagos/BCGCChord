<% layout ('layouts/boilerplate')%>
<div>
  <div class="container my-5">
    <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-lg dark-backround">
      <div class="col-lg-7 p-3 p-lg-5 pt-lg-3 text-white ">
        <h1 class="display-4 fw-bold lh-1"><%= song.title %> </h1>
        <p class="lead"> <%= song.artist%></p>
        <p class="text-white"> <%= song.yearReleased%></p>
        <div class="d-grid gap-2 d-md-flex justify-content-md-start mb-4 mb-lg-3">
          <a href=" <%= song.urlMedia%>" class="btn btn-danger btn-lg px-4 me-md-2 fw-bold" target="_blank"><i class="fa-brands fa-youtube p-1"></i>Watch</a>
        </div>
      </div>
      <!-- <div class="col-lg-4 offset-lg-1 p-0 overflow-hidden shadow-lg">
          <img class="rounded-lg-3 gradient-background"  alt="" width="700" height="500" loading="lazy">
      </div> -->
    </div>
  </div>
</div>
  
  <div class="m-0">
      <div class="card mb-3 px-2 py-4" style="background-color: #140501;">
          <div class="row text-white">
              <div class="col-md-12">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-sm-4 col-md-2">
                        <div class="d-inline-flex"> 
                          <label class="mx-2">Transpose</label>
                          <select id="selectBaseChord"  class="border border-white rounded bg-dark text-white" data-key="<%= song.baseKey %>">Type              
                          </select>
                        </div>
                      </div>
                    
                    </div>

                      <div class="container-fluid">
                          <div class="row justify-content-center lyricsSection" data-songId = "<%= song.songId %>">
                      </div>          
                  </div>
              </div>
          </div>
      </div>
    
  </div>
</div>


  
  
   

<!-- Modal -->
<div class="modal fade" id="chordModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title chordModalTitle" id="exampleModalLabel" >Add Chord for Lyric</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row d-flex flex-row-reverse bd-highlight ">
          <div class="col-sm-2 my-2">
            <select class="form-select p-1" id="baseChord" aria-label="Default select example">
            </select>
          </div>

        </div>
        <form id="chordModalForm">
          <div class="container-fluid chordModalLyrics">
          </div>
        <div class="input-group mb-3">
          <input type="hidden" class="form-control lyricSection" placeholder="Chord" name=lyricSection">
          <input type="hidden" class="form-control lyricIndex" placeholder="Chord" name=lyricIndex">
          <input type="hidden" class="form-control lyricLine" placeholder="Chord" name=lyricLine">
        </div>
      </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" id="chordModalSaveBtn" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal -->
<div class="modal fade" id="sectionModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title sectionModalTitle" id="sectionModal" >Add Chord for Lyric</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">

        <form id="sectionModalForm">
          <div class="sectionModalSection">
           
          </div>
     
         
        <div class="input-group mb-3">
          <input type="hidden" class="form-control lyricSection" placeholder="Chord" name=lyricSection">
          <input type="hidden" class="form-control lyricIndex" placeholder="Chord" name=lyricIndex">
          <input type="hidden" class="form-control lyricLine" placeholder="Chord" name=lyricLine">
        </div>
      </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" id="sectionModalSaveBtn" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>
    
   
   
</body>
<script src="/scales.js"></script>
<script src="/chordSheet.js"></script>
<script src="/chordTranspose.js"></script>
<script src="/renderChords.js"> </script>
<script>
  $(document).ready(async function(){
    let song;

    
    
    song = await renderLyrics();
    renderChords (song);

    selectChordKey();

  

async function transposeChords(transposeKey) {

  const ChordSheet = ChordSheetJS; // Accessing the entire library
    const originalKeyU = originalKey.toUpperCase();
    // Using Chord.parse() method
    const interval = calculateInterval(originalKeyU, transposeKey);

    const transposedSegments = [];

    for (const segment of song.segments) {
        const transposedChords = [];

        for (const chords of segment.chords) {
            for (const chord of chords.chords) {
                if (chord) {
                    const chordEl = ChordSheet.Chord.parse(chord);
                    const transposedChord = await chordEl.transpose(parseInt(interval));
                    transposedChords.push(transposedChord.toString());
                } else {
                    transposedChords.push(null);
                }
            }
        }

        transposedSegments.push({ section: segment.section, chords: transposedChords });
    }

    return transposedSegments;
}



$(document).on('change', '#selectBaseChord', async function()   {
  
    let transposeKey  = $(this).val().toUpperCase();

    transposeChords(transposeKey)
    .then(transposedSegments => {
        transposedSegments.forEach((section)=>{
          const findSection = $('.lyricsSection').find(`div[data-section = "${section.section}"]`);
          console.log(section)
          section.chords.forEach((chord, index)=>{
            if (chord){
              findSection.find('.lyric-segment .chords').eq(index).text(`${chord}`);
            } 
            else {
              findSection.find('.lyric-segment .chords').eq(index).html('&nbsp;');
            }
         
          });
        });

        // Do something with the transposed segments
    })
    .catch(error => {
        console.error(error);
        // Handle errors if needed
    });

   
});

  });

</script>
</html>
